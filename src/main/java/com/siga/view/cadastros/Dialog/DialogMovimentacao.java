/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.siga.view.cadastros.Dialog;

import com.siga.controller.Entidades.MovimentacaoController;
import com.siga.model.Entidade;
import com.siga.model.Fornecedor;
import com.siga.model.Requisitante;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;


/**
 *
 * @author franc
 */
public class DialogMovimentacao extends javax.swing.JFrame implements DialogEntidade{

    /**
     * Creates new form DialogMovimentacao
     */
    public DialogMovimentacao() {
        initComponents();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tipoMovimentacao = new javax.swing.JComboBox<>();
        terceirosCB = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tipoMovimentacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {"ENTRADA", "SAIDA"}));
        tipoMovimentacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoMovimentacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(terceirosCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tipoMovimentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addComponent(tipoMovimentacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(terceirosCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(86, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tipoMovimentacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoMovimentacaoActionPerformed
      
        commitComboBox();
    }//GEN-LAST:event_tipoMovimentacaoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogMovimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogMovimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogMovimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogMovimentacao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DialogMovimentacao().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<Entidade> terceirosCB;
    private javax.swing.JComboBox<String> tipoMovimentacao;
    // End of variables declaration//GEN-END:variables
    private MovimentacaoController controller;
    
    
    public void commitComboBox(){
        String valorSelecionado = tipoMovimentacao.getSelectedItem().toString();
        System.out.println(valorSelecionado);
        try {
           controller.carregarComboBox(valorSelecionado);
        } catch (SQLException ex) {
            Logger.getLogger(DialogMovimentacao.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }
    public void carregarRequisitate(List<Requisitante> requisitantes){
        terceirosCB.removeAllItems();
        for(Requisitante r: requisitantes){
            terceirosCB.addItem(r);
        }
        System.out.println("carregando");
    }
    
    public void carregarFornecedor(List<Fornecedor> fornecedores){
        terceirosCB.removeAllItems();
        for(Fornecedor f: fornecedores){
            terceirosCB.addItem(f);
        }
        System.out.println("carregando");
    }

    @Override
    public void addEntidadeListener(ActionListener listener) {
        
    }

    @Override
    public void showMessage(String message) {
        
    }

    @Override
    public void limparInputs() {
        
    }

    public MovimentacaoController getController() {
        return controller;
    }

    public void setController(MovimentacaoController controller) {
        this.controller = controller;
    }

    public Entidade getTerceiros() {
        return (Entidade) terceirosCB.getSelectedItem();
    }

    public JComboBox<Entidade> getTerceirosCB() {
        return terceirosCB;
    }

    

   
    
    
    
    
}

